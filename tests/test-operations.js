require('dotenv').config();
const mysql = require('mysql2/promise');
const jwt = require('jsonwebtoken');

const testOperations = {
    async testUserOperations() {
        console.log('\nüë§ Test des op√©rations utilisateur...');
        const connection = await mysql.createConnection({
            host: 'localhost',
            user: 'root',
            password: '',
            database: 'dadsac_test'
        });

        try {
            // Test de cr√©ation d'utilisateur
            const [createResult] = await connection.execute(
                'INSERT INTO users (email, password_hash) VALUES (?, ?)',
                ['new_user@dadsac.org', 'hashed_password']
            );
            console.log('‚úì Cr√©ation utilisateur r√©ussie, ID:', createResult.insertId);

            // Test de lecture utilisateur
            const [users] = await connection.execute(
                'SELECT * FROM users WHERE email = ?',
                ['new_user@dadsac.org']
            );
            console.log('‚úì Lecture utilisateur r√©ussie:', users[0].email);

            // Test de mise √† jour utilisateur
            await connection.execute(
                'UPDATE users SET password_hash = ? WHERE email = ?',
                ['new_password_hash', 'new_user@dadsac.org']
            );
            console.log('‚úì Mise √† jour utilisateur r√©ussie');

        } catch (error) {
            console.error('Erreur utilisateur:', error);
            throw error;
        } finally {
            await connection.end();
        }
    },

    async testDonationOperations() {
        console.log('\nüí∞ Test des op√©rations de don...');
        const connection = await mysql.createConnection({
            host: 'localhost',
            user: 'root',
            password: '',
            database: 'dadsac_test'
        });

        try {
            // R√©cup√©ration de l'ID utilisateur
            const [users] = await connection.execute(
                'SELECT id FROM users WHERE email = ?',
                ['new_user@dadsac.org']
            );
            const userId = users[0].id;

            // Cr√©ation d'un don
            const [createResult] = await connection.execute(
                'INSERT INTO donations (user_id, amount, currency, status) VALUES (?, ?, ?, ?)',
                [userId, 100.00, 'EUR', 'pending']
            );
            console.log('‚úì Cr√©ation don r√©ussie, ID:', createResult.insertId);

            // Lecture du don
            const [donations] = await connection.execute(
                'SELECT * FROM donations WHERE user_id = ?',
                [userId]
            );
            console.log('‚úì Lecture don r√©ussie, montant:', donations[0].amount);

            // Mise √† jour du statut du don
            await connection.execute(
                'UPDATE donations SET status = ? WHERE id = ?',
                ['completed', createResult.insertId]
            );
            console.log('‚úì Mise √† jour statut don r√©ussie');

        } catch (error) {
            console.error('Erreur don:', error);
            throw error;
        } finally {
            await connection.end();
        }
    },

    async testJWTOperations() {
        console.log('\nüîê Test des op√©rations JWT...');
        try {
            // Cr√©ation d'un token
            const payload = {
                id: 1,
                email: 'new_user@dadsac.org',
                role: 'user'
            };
            const token = jwt.sign(payload, process.env.JWT_SECRET || 'test_secret', {
                expiresIn: '1h'
            });
            console.log('‚úì Token JWT cr√©√©');

            // V√©rification du token
            const decoded = jwt.verify(token, process.env.JWT_SECRET || 'test_secret');
            console.log('‚úì Token JWT v√©rifiÔøΩÔøΩ:', decoded.email);

        } catch (error) {
            console.error('Erreur JWT:', error);
            throw error;
        }
    },

    async runAllTests() {
        console.log('üöÄ D√©marrage des tests d\'op√©rations...\n');
        try {
            await this.testUserOperations();
            await this.testDonationOperations();
            await this.testJWTOperations();
            console.log('\n‚úÖ Tous les tests d\'op√©rations ont r√©ussi!\n');
        } catch (error) {
            console.error('\n‚ùå Erreur:', error);
            process.exit(1);
        }
    }
};

// Ex√©cution des tests
testOperations.runAllTests().catch(console.error);
